name: build-intellij-plugin

on:
  push:
    branches: [ ci ]
    paths:
      - '.github/workflows/build-intellij-plugin.yml'
      - 'intellij-plugin/**'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Gradle wrapper validation
        uses: gradle/wrapper-validation-action@v1.0.4

      - name: Setup java
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
          cache: gradle

      - name: Export properties
        id: properties
        shell: bash
        run: |
          cd intellij-plugin
          PROPERTIES="$(./gradlew properties -p app --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^pluginName:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=name::$NAME"
          echo "::set-output name=changelog::$CHANGELOG"
          echo "::set-output name=pluginVerifierHomeDir::~/.pluginVerifier"
          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      - name: Run tests
        run: cd intellij-plugin && ./gradlew test

      - name: Collect tests result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: tests-result
          path: ${{ github.workspace }}/intellij-plugin/app/build/reports/tests

      - name: Setup plugin verifier IDEs cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.properties.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('intellij-idea/app/build/listProductsReleases.txt') }}

      - name: Run plugin verification tasks
        run: |
          cd intellij-plugin
          ./gradlew runPluginVerifier -Pplugin.verifier.home.dir=${{ steps.properties.outputs.pluginVerifierHomeDir }}

      - name: Collect plugin verifier result
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/intellij-plugin/app/build/reports/pluginVerifier

#      - name: Qodana - Code Inspection
#        uses: JetBrains/qodana-action@v4.2.5

      - name: Prepare plugin artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/intellij-plugin/app/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content
          echo "::set-output name=filename::${FILENAME:0:-4}"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: intellij-plugin/app/build/distributions/content/*/*

  releaseDraft:
    name: Release Draft
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Remove old release drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      - name: Create release draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title "intellij-plugin v${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )"
